package com.lzb.tester.common;


import com.lzb.tester.entity.HttpResult;

import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class LzbBranchTest {


    static class LocalVariable {
        private Long[] a = new Long[1024*1024];
    }

    private static ThreadLocal<LocalVariable> local = new ThreadLocal<>();

    private static ThreadPoolExecutor threadPool = new ThreadPoolExecutor(1,5,5,TimeUnit.SECONDS,new LinkedBlockingQueue<>());

    public static void main(String[] args) {
//        for (int i = 0; i < 100000000; i++) {
//            threadPool.execute(()->{
//                local.set(new LocalVariable());
//                System.out.println("local variable");
//            });
//        }

        String str1 = new String("abcd");
        String str2 = str1.intern();

        String str3 = "abcd";

        System.out.println(str2 == str3);

    }


    public static void concurrentRequest(int i){
        Map<String,Object> params = new HashMap<>();
        params.put("OrderId",i);
        HttpUtil.get("t.rebatest.com/Ad/OrderRedis", params, null);
    }

    public static Long randomNumber(){
        Random random = new Random();
        int prefix = 0;
        do {
            prefix = random.nextInt(50);
        }while (prefix == 0);
        return (long)((random.nextDouble() + prefix) * (1 << prefix));
    }

}
